from django.shortcuts import render
import json
import MySQLdb
import imaplib
import email
import time

def handle(request):
   ctr = 0 #Counter to check how many times the loop has executed
   obj = [] #List to store Coordinates of filled dustbins
   try:
      while 1:
         if ctr==5: 
            break
         ctr  = ctr+1 

         def process_mailbox(M): #Function to fetch all unread messages from the email account
            flag = 0
            rv, data = M.search(None, "(UNSEEN)") #Look for all unread messages
            if rv!="OK":
               pass
            for num in data[0].split():
               rv, data = M.fetch(num, '(RFC822)') 
               if rv!="OK":
                  pass

               msg = email.message_from_string(data[0][1]) 
               ID = str(msg['Subject']) #Extract only subject which is the ID of a particular dustbin

               db = MySQLdb.connect("localhost","root","root","dustbin") #Connect to database

               cursor = db.cursor()

               sql = """SELECT * FROM data where id=%s"""%(str(ID)) #Prepare a sql statement to be executed

              
               cursor.execute(sql) #Execute the sql statement
               results = cursor.fetchall()
               for row in results:
                  lat = row[1] #Save latitude value
                  long = row[2] #Save longitude value


               db.close()

               obj.append("\"Latitude\":" + str(lat) + ",\"Longitude\":" + str(long)) #Append Latitude and longitude value to a list

         M = imaplib.IMAP4_SSL('imap.gmail.com')

         username = "YOUREMAIL"
         password = "YOURPASSWORD"

         try:
            M.login(username, password) #Login into mail account
            rv, mailboxes = M.list() 
            rv, data = M.select("INBOX") 
            if rv == "OK":
               process_mailbox(M)
               M.close()
            M.logout()

         except imaplib.IMAP4.error:
            pass      

         time.sleep(5) #Time gap between each loop execution

   except:
      pass

   return render(request,'display.html',{"coordinates": obj}) #Render the HTML page with the coordinates value
